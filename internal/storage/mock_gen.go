// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	core "github.com/fishmanDK/miet_project/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrders) CreateOrder(newOrder core.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", newOrder)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersMockRecorder) CreateOrder(newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrders)(nil).CreateOrder), newOrder)
}

// DeleteOrder mocks base method.
func (m *MockOrders) DeleteOrder(userID, cassetteID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", userID, cassetteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrdersMockRecorder) DeleteOrder(userID, cassetteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrders)(nil).DeleteOrder), userID, cassetteID)
}

// GetOrdersForAdmin mocks base method.
func (m *MockOrders) GetOrdersForAdmin(cassetteID, storeID int) ([]core.OrdersForAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForAdmin", cassetteID, storeID)
	ret0, _ := ret[0].([]core.OrdersForAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForAdmin indicates an expected call of GetOrdersForAdmin.
func (mr *MockOrdersMockRecorder) GetOrdersForAdmin(cassetteID, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForAdmin", reflect.TypeOf((*MockOrders)(nil).GetOrdersForAdmin), cassetteID, storeID)
}

// GetUserOrders mocks base method.
func (m *MockOrders) GetUserOrders(userID int) ([]core.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", userID)
	ret0, _ := ret[0].([]core.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrdersMockRecorder) GetUserOrders(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrders)(nil).GetUserOrders), userID)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockAuth) Authentication(user core.Client) (core.AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", user)
	ret0, _ := ret[0].(core.AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication.
func (mr *MockAuthMockRecorder) Authentication(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockAuth)(nil).Authentication), user)
}

// CreateSession mocks base method.
func (m *MockAuth) CreateSession(userId int, session core.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", userId, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthMockRecorder) CreateSession(userId, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuth)(nil).CreateSession), userId, session)
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(newUser core.Client) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", newUser)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), newUser)
}

// MockCassettes is a mock of Cassettes interface.
type MockCassettes struct {
	ctrl     *gomock.Controller
	recorder *MockCassettesMockRecorder
}

// MockCassettesMockRecorder is the mock recorder for MockCassettes.
type MockCassettesMockRecorder struct {
	mock *MockCassettes
}

// NewMockCassettes creates a new mock instance.
func NewMockCassettes(ctrl *gomock.Controller) *MockCassettes {
	mock := &MockCassettes{ctrl: ctrl}
	mock.recorder = &MockCassettesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCassettes) EXPECT() *MockCassettesMockRecorder {
	return m.recorder
}

// CreateCassette mocks base method.
func (m *MockCassettes) CreateCassette(input core.CreateCassetteReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCassette", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCassette indicates an expected call of CreateCassette.
func (mr *MockCassettesMockRecorder) CreateCassette(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCassette", reflect.TypeOf((*MockCassettes)(nil).CreateCassette), input)
}

// CreateCassetteAvailability mocks base method.
func (m *MockCassettes) CreateCassetteAvailability(newData core.CassetteAvailability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCassetteAvailability", newData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCassetteAvailability indicates an expected call of CreateCassetteAvailability.
func (mr *MockCassettesMockRecorder) CreateCassetteAvailability(newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCassetteAvailability", reflect.TypeOf((*MockCassettes)(nil).CreateCassetteAvailability), newData)
}

// DeleteCasseteByID mocks base method.
func (m *MockCassettes) DeleteCasseteByID(cassetteID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCasseteByID", cassetteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCasseteByID indicates an expected call of DeleteCasseteByID.
func (mr *MockCassettesMockRecorder) DeleteCasseteByID(cassetteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCasseteByID", reflect.TypeOf((*MockCassettes)(nil).DeleteCasseteByID), cassetteID)
}

// GetCassette mocks base method.
func (m *MockCassettes) GetCassette(cassetteID int) (core.Cassette, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCassette", cassetteID)
	ret0, _ := ret[0].(core.Cassette)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCassette indicates an expected call of GetCassette.
func (mr *MockCassettesMockRecorder) GetCassette(cassetteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCassette", reflect.TypeOf((*MockCassettes)(nil).GetCassette), cassetteID)
}

// GetCassetteDetails mocks base method.
func (m *MockCassettes) GetCassetteDetails(cassetteID, userID int) (core.CassetteAvailability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCassetteDetails", cassetteID, userID)
	ret0, _ := ret[0].(core.CassetteAvailability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCassetteDetails indicates an expected call of GetCassetteDetails.
func (mr *MockCassettesMockRecorder) GetCassetteDetails(cassetteID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCassetteDetails", reflect.TypeOf((*MockCassettes)(nil).GetCassetteDetails), cassetteID, userID)
}

// GetCassettes mocks base method.
func (m *MockCassettes) GetCassettes() ([]core.Cassette, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCassettes")
	ret0, _ := ret[0].([]core.Cassette)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCassettes indicates an expected call of GetCassettes.
func (mr *MockCassettesMockRecorder) GetCassettes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCassettes", reflect.TypeOf((*MockCassettes)(nil).GetCassettes))
}

// GetCassettesByStoreID mocks base method.
func (m *MockCassettes) GetCassettesByStoreID(id int) ([]core.Cassette, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCassettesByStoreID", id)
	ret0, _ := ret[0].([]core.Cassette)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCassettesByStoreID indicates an expected call of GetCassettesByStoreID.
func (mr *MockCassettesMockRecorder) GetCassettesByStoreID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCassettesByStoreID", reflect.TypeOf((*MockCassettes)(nil).GetCassettesByStoreID), id)
}

// SaveCassetteChanges mocks base method.
func (m *MockCassettes) SaveCassetteChanges(changes core.ChangeCassette) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCassetteChanges", changes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCassetteChanges indicates an expected call of SaveCassetteChanges.
func (mr *MockCassettesMockRecorder) SaveCassetteChanges(changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCassetteChanges", reflect.TypeOf((*MockCassettes)(nil).SaveCassetteChanges), changes)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateStore mocks base method.
func (m *MockStore) CreateStore(newStore core.Store) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStore", newStore)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStore indicates an expected call of CreateStore.
func (mr *MockStoreMockRecorder) CreateStore(newStore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStore", reflect.TypeOf((*MockStore)(nil).CreateStore), newStore)
}

// GetStores mocks base method.
func (m *MockStore) GetStores() ([]core.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStores")
	ret0, _ := ret[0].([]core.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStores indicates an expected call of GetStores.
func (mr *MockStoreMockRecorder) GetStores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStores", reflect.TypeOf((*MockStore)(nil).GetStores))
}

// MockReservation is a mock of Reservation interface.
type MockReservation struct {
	ctrl     *gomock.Controller
	recorder *MockReservationMockRecorder
}

// MockReservationMockRecorder is the mock recorder for MockReservation.
type MockReservationMockRecorder struct {
	mock *MockReservation
}

// NewMockReservation creates a new mock instance.
func NewMockReservation(ctrl *gomock.Controller) *MockReservation {
	mock := &MockReservation{ctrl: ctrl}
	mock.recorder = &MockReservationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservation) EXPECT() *MockReservationMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockReservation) CreateReservation(newReservate core.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", newReservate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockReservationMockRecorder) CreateReservation(newReservate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservation)(nil).CreateReservation), newReservate)
}

// DeleteReservation mocks base method.
func (m *MockReservation) DeleteReservation(userID, cassetteID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", userID, cassetteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockReservationMockRecorder) DeleteReservation(userID, cassetteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockReservation)(nil).DeleteReservation), userID, cassetteID)
}

// GetUserReservations mocks base method.
func (m *MockReservation) GetUserReservations(userID int) ([]core.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReservations", userID)
	ret0, _ := ret[0].([]core.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReservations indicates an expected call of GetUserReservations.
func (mr *MockReservationMockRecorder) GetUserReservations(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReservations", reflect.TypeOf((*MockReservation)(nil).GetUserReservations), userID)
}
